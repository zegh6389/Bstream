// This is your Prisma schema file for PostgreSQL (AWS Production),
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String?
  password         String?
  emailVerified    DateTime?
  image            String?
  isAdmin          Boolean   @default(false)
  twoFactorEnabled Boolean   @default(false)
  twoFactorSecret  String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  accounts           Account[]
  sessions           Session[]
  transactions       Transaction[]
  businesses         Business[]
  verificationTokens VerificationToken[]
  resetTokens        ResetToken[]
  AuditLog           AuditLog[]
  Attachment         Attachment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(cuid())
  userId  String
  token   String   @unique
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResetToken {
  id      String   @id @default(cuid())
  userId  String
  token   String   @unique
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Business {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([userId, name])
}

model Category {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  type        CategoryType
  color       String?
  icon        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  transactions Transaction[]
}

model Transaction {
  id          String            @id @default(cuid())
  amount      Float
  description String?
  vendor      String?
  date        DateTime          @default(now())
  type        TransactionType
  status      TransactionStatus @default(COMPLETED)
  notes       String?
  receiptUrl  String?
  userId      String
  businessId  String?
  categoryId  String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  business Business? @relation(fields: [businessId], references: [id], onDelete: SetNull)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
}

enum CategoryType {
  INCOME
  EXPENSE
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model AuditLog {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  userId     String
  action     String
  resource   String
  resourceId String?
  details    Json?
  ip         String?
  userAgent  String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([resource])
}

model Attachment {
  id          String   @id @default(cuid())
  key         String   @unique
  fileName    String
  contentType String
  description String?
  status      String   @default("pending")
  entityType  String?
  entityId    String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([entityType, entityId])
  @@index([userId])
}
