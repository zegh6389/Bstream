"use strict";exports.id=6893,exports.ids=[6893],exports.modules={66893:(e,t,s)=>{s.d(t,{fromSSO:()=>C});var o=s(71930),i=s(92413);let n=e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name);var r=s(21459);let a="To refresh this SSO session run 'aws sso login' with the corresponding profile.",l=async(e,t={})=>{let{SSOOIDCClient:o}=await s.e(9184).then(s.bind(s,19184));return new o(Object.assign({},t.clientConfig??{},{region:e??t.clientConfig?.region,logger:t.clientConfig?.logger??t.parentClientConfig?.logger}))},g=async(e,t,o={})=>{let{CreateTokenCommand:i}=await s.e(9184).then(s.bind(s,19184));return(await l(t,o)).send(new i({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))},c=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new o.Jh(`Token is expired. ${a}`,!1)},f=(e,t,s=!1)=>{if(void 0===t)throw new o.Jh(`Value not present for '${e}' in SSO Token${s?". Cannot refresh":""}. ${a}`,!1)},{writeFile:w}=s(29021).promises,h=(e,t)=>w((0,i.C9)(e),JSON.stringify(t,null,2)),p=new Date(0),d=(e={})=>async({callerClientConfig:t}={})=>{let s,n={...e,parentClientConfig:{...t,...e.parentClientConfig}};n.logger?.debug("@aws-sdk/token-providers - fromSso");let r=await (0,i.YU)(n),l=(0,i.Bz)({profile:n.profile??t?.profile}),w=r[l];if(w){if(!w.sso_session)throw new o.Jh(`Profile '${l}' is missing required property 'sso_session'.`)}else throw new o.Jh(`Profile '${l}' could not be found in shared credentials file.`,!1);let d=w.sso_session,u=(await (0,i.qw)(n))[d];if(!u)throw new o.Jh(`Sso session '${d}' could not be found in shared credentials file.`,!1);for(let e of["sso_start_url","sso_region"])if(!u[e])throw new o.Jh(`Sso session '${d}' is missing required property '${e}'.`,!1);u.sso_start_url;let S=u.sso_region;try{s=await (0,i.vf)(d)}catch(e){throw new o.Jh(`The SSO session token associated with profile=${l} was not found or is invalid. ${a}`,!1)}f("accessToken",s.accessToken),f("expiresAt",s.expiresAt);let{accessToken:C,expiresAt:_}=s,k={token:C,expiration:new Date(_)};if(k.expiration.getTime()-Date.now()>3e5)return k;if(Date.now()-p.getTime()<3e4)return c(k),k;f("clientId",s.clientId,!0),f("clientSecret",s.clientSecret,!0),f("refreshToken",s.refreshToken,!0);try{p.setTime(Date.now());let e=await g(s,S,n);f("accessToken",e.accessToken),f("expiresIn",e.expiresIn);let t=new Date(Date.now()+1e3*e.expiresIn);try{await h(d,{...s,accessToken:e.accessToken,expiresAt:t.toISOString(),refreshToken:e.refreshToken})}catch(e){}return{token:e.accessToken,expiration:t}}catch(e){return c(k),k}},u=async({ssoStartUrl:e,ssoSession:t,ssoAccountId:n,ssoRegion:a,ssoRoleName:l,ssoClient:g,clientConfig:c,parentClientConfig:f,profile:w,logger:h})=>{let p,u,S="To refresh this SSO session run aws sso login with the corresponding profile.";if(t)try{let e=await d({profile:w})();p={accessToken:e.token,expiresAt:new Date(e.expiration).toISOString()}}catch(e){throw new o.C1(e.message,{tryNextLink:!1,logger:h})}else try{p=await (0,i.vf)(e)}catch(e){throw new o.C1(`The SSO session associated with this profile is invalid. ${S}`,{tryNextLink:!1,logger:h})}if(new Date(p.expiresAt).getTime()-Date.now()<=0)throw new o.C1(`The SSO session associated with this profile has expired. ${S}`,{tryNextLink:!1,logger:h});let{accessToken:C}=p,{SSOClient:_,GetRoleCredentialsCommand:k}=await s.e(5262).then(s.bind(s,45262)),y=g||new _(Object.assign({},c??{},{logger:c?.logger??f?.logger,region:c?.region??a}));try{u=await y.send(new k({accountId:n,roleName:l,accessToken:C}))}catch(e){throw new o.C1(e,{tryNextLink:!1,logger:h})}let{roleCredentials:{accessKeyId:T,secretAccessKey:x,sessionToken:m,expiration:O,credentialScope:$,accountId:I}={}}=u;if(!T||!x||!m||!O)throw new o.C1("SSO returns an invalid temporary credential.",{tryNextLink:!1,logger:h});let N={accessKeyId:T,secretAccessKey:x,sessionToken:m,expiration:new Date(O),...$&&{credentialScope:$},...I&&{accountId:I}};return t?(0,r.g)(N,"CREDENTIALS_SSO","s"):(0,r.g)(N,"CREDENTIALS_SSO_LEGACY","u"),N},S=(e,t)=>{let{sso_start_url:s,sso_account_id:i,sso_region:n,sso_role_name:r}=e;if(!s||!i||!n||!r)throw new o.C1(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:t});return e},C=(e={})=>async({callerClientConfig:t}={})=>{e.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");let{ssoStartUrl:s,ssoAccountId:r,ssoRegion:a,ssoRoleName:l,ssoSession:g}=e,{ssoClient:c}=e,f=(0,i.Bz)({profile:e.profile??t?.profile});if(s||r||a||l||g)if(s&&r&&a&&l)return u({ssoStartUrl:s,ssoSession:g,ssoAccountId:r,ssoRegion:a,ssoRoleName:l,ssoClient:c,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:f});else throw new o.C1('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:e.logger});{let t=(await (0,i.YU)(e))[f];if(!t)throw new o.C1(`Profile ${f} was not found.`,{logger:e.logger});if(!n(t))throw new o.C1(`Profile ${f} is not configured with SSO credentials.`,{logger:e.logger});if(t?.sso_session){let n=(await (0,i.qw)(e))[t.sso_session],r=` configurations in profile ${f} and sso-session ${t.sso_session}`;if(a&&a!==n.sso_region)throw new o.C1("Conflicting SSO region"+r,{tryNextLink:!1,logger:e.logger});if(s&&s!==n.sso_start_url)throw new o.C1("Conflicting SSO start_url"+r,{tryNextLink:!1,logger:e.logger});t.sso_region=n.sso_region,t.sso_start_url=n.sso_start_url}let{sso_start_url:r,sso_account_id:l,sso_region:g,sso_role_name:w,sso_session:h}=S(t,e.logger);return u({ssoStartUrl:r,ssoSession:h,ssoAccountId:l,ssoRegion:g,ssoRoleName:w,ssoClient:c,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:f})}}}};